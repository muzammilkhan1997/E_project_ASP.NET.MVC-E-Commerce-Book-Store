@model E_Book_eproject.Models.Product

@{
    ViewData["Title"] = "Product Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <h1 class="text-center mb-4">@Model.Name</h1>

    <div class="row">
        <div class="col-md-6">
            <img src="@Url.Content(Model.Image)" alt="@Model.Name" class="img-fluid rounded shadow " style=" height:80%;" >
        </div>
        <div class="col-md-6">
            <h4>Product Details</h4>
            <hr />
            <dl class="row">
                <dt class="col-sm-4">Author</dt>
                <dd class="col-sm-8">@Html.DisplayFor(model => model.Author)</dd>

                <dt class="col-sm-4">Price</dt>
                <dd class="col-sm-8 text-success">@Html.DisplayFor(model => model.Price)</dd>

                <dt class="col-sm-4">Launch Date</dt>
                <dd class="col-sm-8">@Html.DisplayFor(model => model.Lounch)</dd>

          
                <dt class="col-sm-4">Quantity</dt>
                <dd class="col-sm-8">@Html.DisplayFor(model => model.Stock)</dd>

                <dt class="col-sm-4">Stock</dt>
                <dd class="col-sm-8">@Html.DisplayFor(model => model.Stock)</dd>


                <dt class="col-sm-4">Created By</dt>
                <dd class="col-sm-8">@Html.DisplayFor(model => model.CreatedBy)</dd>

                <dt class="col-sm-4">Category</dt>
                <dd class="col-sm-8">@Html.DisplayFor(model => model.Cat.Name)</dd>

                <dt class="col-sm-4">Subcategory</dt>
                <dd class="col-sm-8">@Html.DisplayFor(model => model.Sub.Name)</dd>

                <dt class="col-sm-4">Description</dt>
                <dd class="col-sm-8">@Html.DisplayFor(model => model.Description)</dd>
            </dl>
            <div class="mt-3">
                <form asp-action="AddToCart" asp-controller="Cart" method="post">
                    <input type="hidden" name="ProductId" value="@Model.Id" />
                  @* <input type="number" name="qty" class="input-box" value="1" min="1" max="10"> *@
                        <div class="product_count">
                            <span class="input-number-decrement"> <i class="ti-minus"></i></span>
                            <input class="input-number" type="text" name="qty" value="1" min="1" max="10">
                            <span class="input-number-increment"> <i class="ti-plus"></i></span>
                       </div>
                       <br />
                    <button type="submit" class="btn btn-primary btn-md">Add to Cart</button>
                    <a asp-action="shop" asp-controller="Home" class="btn btn-primary btn-md">Back to List</a>
                </form>
            </div>
        </div>
    </div>

    
</div>

    <style>
        .container {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
            color: #343a40;
        }

        dt {
            font-weight: bold;
        }

        dd {
            margin-bottom: 10px;
        }

        .btn-lg {
            width: 100%;
        }
    </style>
    <script>
    (function () {
        const quantityContainer = document.querySelector(".quantity");
        const minusBtn = quantityContainer.querySelector(".minus");
        const plusBtn = quantityContainer.querySelector(".plus");
        const inputBox = quantityContainer.querySelector(".input-box");

        updateButtonStates();

        quantityContainer.addEventListener("click", handleButtonClick);
        inputBox.addEventListener("input", handleQuantityChange);

        function updateButtonStates() {
            const value = parseInt(inputBox.value);
            minusBtn.disabled = value <= 1;
            plusBtn.disabled = value >= parseInt(inputBox.max);
        }

        function handleButtonClick(event) {
            if (event.target.classList.contains("minus")) {
                decreaseValue();
            } else if (event.target.classList.contains("plus")) {
                increaseValue();
            }
        }

        function decreaseValue() {
            let value = parseInt(inputBox.value);
            value = isNaN(value) ? 1 : Math.max(value - 1, 1);
            inputBox.value = value;
            updateButtonStates();
            handleQuantityChange();
        }

        function increaseValue() {
            let value = parseInt(inputBox.value);
            value = isNaN(value) ? 1 : Math.min(value + 1, parseInt(inputBox.max));
            inputBox.value = value;
            updateButtonStates();
            handleQuantityChange();
        }

        function handleQuantityChange() {
            let value = parseInt(inputBox.value);
            value = isNaN(value) ? 1 : value;

            // Execute your code here based on the updated quantity value
            console.log("Quantity changed:", value);
        }
    })();

</script>

